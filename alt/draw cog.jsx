// https://stackoverflow.com/questions/23527362/how-to-draw-a-cogwheel-in-html5-canvasmain();function main() {	var cx      = 100,                    // center x			cy      = 150,                    // center y			notches = 7,                      // num. of notches			radiusO = 120,                    // outer radius			radiusI = 90,                    // inner radius			taperO  = 10,                     // outer taper %			taperI  = 10,                     // inner taper %			// pre-calculate values for loop			pi2     = 2 * Math.PI,            // cache 2xPI (360deg)			angle   = pi2 / (notches * 2),    // angle between notches			taperAI = angle * taperI * 0.005, // inner taper offset (100% = half notch)			taperAO = angle * taperO * 0.005, // outer taper offset			a       = angle,                  // iterator (angle)			toggle  = false;                  // notch radius level (i/o)							var path = [];			// move to starting point	//ctx.moveTo(cx + radiusO * Math.cos(taperAO), cy + radiusO * Math.sin(taperAO));	path.push( [cx + radiusO * Math.cos(taperAO), cy + radiusO * Math.sin(taperAO) ] );	// loop	for (; a <= pi2; a += angle) {			// draw inner to outer line			if (toggle) {				/*					ctx.lineTo(cx + radiusI * Math.cos(a - taperAI),										 cy + radiusI * Math.sin(a - taperAI));					ctx.lineTo(cx + radiusO * Math.cos(a + taperAO),										 cy + radiusO * Math.sin(a + taperAO));					*/					path.push( [ cx + radiusI * Math.cos(a - taperAI),										 cy + radiusI * Math.sin(a - taperAI) ] );					path.push( [ cx + radiusO * Math.cos(a + taperAO),										 cy + radiusO * Math.sin(a + taperAO) ] );			}			// draw outer to inner line			else {				/*					ctx.lineTo(cx + radiusO * Math.cos(a - taperAO),  // outer line										 cy + radiusO * Math.sin(a - taperAO));					ctx.lineTo(cx + radiusI * Math.cos(a + taperAI),  // inner line										 cy + radiusI * Math.sin(a + taperAI));				*/					path.push( [ cx + radiusO * Math.cos(a - taperAO), 											cy + radiusO * Math.sin(a - taperAO) ] );					path.push( [ cx + radiusI * Math.cos(a + taperAI), 											cy + radiusI * Math.sin(a + taperAI) ] );			}			// switch level			toggle = !toggle;	}	// close the final line	// ctx.closePath();	var doc = app.documents.length ? app.activeDocument : app.documents.add();	var cog = doc.polygons.add();	cog.paths.firstItem().entirePath = path;}