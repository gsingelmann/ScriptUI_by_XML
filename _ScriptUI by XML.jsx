/* ---------------------------------------------------------------------------------------------------------	Todo:	Select: 	- literal gefüllt mit <option> children	- andernfalls verweis auf Variable	Checkbox: 		Wie gehe ich damit um, dass ein Feld mit einem Literal oder einer Variable gefüllt werden kann?--------------------------------------------------------------------------------------------------------- */Array.prototype.contains = function(x) {	for ( var n = 0; n < this.length; n++ ) if ( this[n] == x ) return n;	return false;}main();function main() {	// ----------------------------------------------------------------------------------------	//	Die Scaffolding XML einlesen	// ----------------------------------------------------------------------------------------		var spath = getScriptPath ();	var f = new File( spath + "/simple.xml" );	f = f.openDlg("Welche Config-XML?", function(f) { return ( f.constructor.name == "Folder" || f.name.search(/xml$/i) != -1 ) } );	if ( f == null ) return;	f.open("r");	var x = f.read();	f.close();	var xml = new XML( x );	var x = "undefined", y = "undefined", std_w = "std_w", std_h = "std_h";	var cr = "\n";		// Ich brauch die eine globale Variable, um automatisch IDs vergeben zu können	var crnt_id = 0;	var final_code = Dialog( xml );		var ft = new File( f.parent.fullName + "/" + f.name.replace(/xml$/i, "jsx") );	ft.open("w");	ft.write( final_code );	ft.close();	return;	// Ich gehe davon aus, dass der <root> der XML dem Dialog entspricht.	function Dialog( xml ) {		var type = xml.@type == "palette" ? "palette" : "dialog";		var str = "";		str += '	// ----------------------------------------------------------------' + cr;		str += '	//	Die Dialogkomponenten selbst' + cr;		str += '	// ----------------------------------------------------------------' + cr;		str += '	var std_w = 400, std_h = 100;' + cr		str += '	var sld_lbl_w = 100;' + cr;		str += '	var w = new Window("' + type + '");' + cr;		str += '	w.orientation = "column";' + cr;		str += '	w.alignChildren = ["fill", "fill" ];' + cr + cr;		str += '	// ----------------------------------------------------------------' + cr;		str += '	// Um Eingaben rückgängig machen zu können, müssen wir uns alle Werte merken' + cr;		str += '	// Macht das Auswerten auch leichter ;)' + cr;		str += '	// ----------------------------------------------------------------' + cr;		str += '	w.state = {}' + cr;		var children = xml.children();		for ( var n = 0; n < children.length(); n++ ) {			str += handler( children[n] );		}			str += '	w.show()\n';		return str;	}	/*	fieldset	fieldset-legend	input:text -> edittext	input:number -> edittext	select	-> dropdown	select size	-> listbox	select size multiple	->listbox	textarea	-> edittext:multiline	slider	button			*/	function handler( element, parent ) {		var className = element.name().toString();		if ( className.toLowerCase() == "fieldset") {			return Fieldset( element, parent ) + "\n";		} else if ( className.toLowerCase() == "input") {			return Input( element, parent ) + "\n";		} else if (className.toLowerCase() == "select") {			return Select( element, parent ) + "\n";		} else if (className.toLowerCase() == "textarea") {			return Textarea( element, parent ) + "\n";		} else if (className.toLowerCase() == "slider") {			return Slider( element, parent ) + "\n";		} else if (className.toLowerCase() == "button") {			return Button( element, parent ) + "\n";		} else if (className.toLowerCase() == "checkbox") {			return Checkbox( element, parent ) + "\n";		} else {			return "";		}	}	// ----------------------------------------------------------------------------------------	// 	Fieldsets = Groups und Panels	// ----------------------------------------------------------------------------------------	function Fieldset( element, parent ) {		var str = "";		if ( !parent ) parent = "w";		var fstype = element.legend.toString() != "" ? "panel" : "group";		var orientation = element.@orientation.toString() != "" ? element.@orientation.toString() : "column";		var valign = element.@valign.toString() != "" ? element.@valign.toString() : "fill";		var id = get_id( element );				str += build_line( '// ----------------- %1: %2', fstype, id );		str += build_line( '%1.%2 = %1.add("%3", undefined , "%4")', parent, id, fstype, element.legend.toString() );		str += build_line( '%1.%2.orientation = "%3"', parent, id, orientation );		str += build_line( '%1.%2.alignChildren = ["fill", "%3"]', parent, id, valign );		var children = element.children();		for ( var n = 0; n < children.length(); n++ ) {			str += handler( children[n], parent + "." + id );		}		return str;	}	// ----------------------------------------------------------------------------------------	// 	Eingabefelder	// ----------------------------------------------------------------------------------------	function Input(element, parent) {		var str = "";		var id = get_id( element );		var type = element.@type.toString() || "text";		var value = trim( element.toString() );				str += build_line( '// ----------------- %1: %2', "edittext", id );		str += build_line( '%1.add("statictext", undefined, "%2")', parent, element.@label.toString() );		str += build_line( '%1.%2 = %1.add("edittext", [ undefined, undefined, std_w, 20], "")', parent, id );				str += build_line( '%1.%2.text = "%3"', parent, id, value );		str += build_line( 'w.state.%1 = "%2"', id, value );				str += build_line( '%1.%2.onChange = function() {', parent, id );		if ( type == "number" ) {			str += build_line( '	if ( ! isNaN( Number( this.text ) ) ) {' );			str += build_line( '		w.state.%1 = Number( this.text)', id );			str += build_line( '	} else {' );			str += build_line( '		this.text = w.state.%1', id );			str += build_line( '	}' );		} else {			str += build_line( '		w.state.%1 = this.text', id );					}		str += build_line( '}' );		return str;	}	function Textarea(element, parent) {		var str = "";		var id = get_id( element );		var value = trim(element.toString()).replace(/\r/g, "\\r").replace(/\n/g, "\\n");		str += build_line( '// ----------------- %1: %2', "textarea", id );		str += build_line( '%1.add("statictext", undefined, "%2")', parent, element.@label.toString() );		str += build_line( '%1.%2 = %1.add("edittext", [ undefined, undefined, std_w, std_h], "", {multiline:true, scrolling: true, wantReturn: true})', parent, id );str += build_line ( '%1.%2.text = w.state.%2 = "%3";', parent, id, value );		str += build_line( '%1.%2.onChange = function() {', parent, id );		str += build_line( '	this.window.state.%1 = this.text', id );		str += build_line( '}' );		return str;	}	// ----------------------------------------------------------------------------------------	// 	Checkbox	// ----------------------------------------------------------------------------------------	function Checkbox(element, parent) {		var str = "";		var id = get_id( element );		var value = element.toString() == "" ? "false" : "true";		str += build_line( '// ----------------- %1: %2', "checkbox", id );		str += build_line( '%1.%2 = %1.add("checkbox", undefined, "%3")', parent, id, element.@label.toString() );		str += build_line ( '%1.%2.value = w.state.%2 = "%3";', parent, id, value );		str += build_line( '%1.%2.onClick = function() {', parent, id );		str += build_line( '	this.window.state.%1 = this.value', id );		str += build_line( '}' );				return str;	}	// ----------------------------------------------------------------------------------------	// 	Slider	// ----------------------------------------------------------------------------------------	function Slider(element, parent) {		var str = "";		var id = get_id( element );		var min = element.@min.toString() != "" ? element.@min.toString() : "0";		var max = element.@max.toString() != "" ? element.@max.toString() : "100";		var val = element.toString() != "" ? element.toString() : "50";				str += build_line( '// ----------------- %1: %2', "slider", id );		str += build_line( '%1.%2_group = %1.add("group", undefined, "", {orientation: "row"})', parent, id );		str += build_line( '%1.%2_group.add("statictext", [undefined, undefined, sld_lbl_w, 20], "%3")', parent, id, element.@label.toString() );		str += build_line( '%1.%2 = %1.%2_group.add("slider", [undefined, undefined, (std_w - (sld_lbl_w + 30)), 20], "")', parent, id );		str += build_line( '%1.%2_fd = %1.%2_group.add("edittext", [undefined, undefined, 30, 20], "")', parent, id );				str += build_line( '%1.%2.minvalue = %3', parent, id, min );		str += build_line( '%1.%2.maxvalue = %3', parent, id, max );		str += build_line( '%1.%2.value = %3', parent, id, val );		str += build_line( '%1.%2_fd.text = "%3"', parent, id, val );		str += build_line( '%1.%2.id = "%2"', parent, id );		str += build_line( 'w.state.%1 = %2', id, val);				str += build_line( '%1.%2.onChange = function() {', parent, id );		str += build_line( '	%1.%2_fd.text = this.value', parent, id );		str += build_line( '	this.window.state[ this.id ] = this.value' );		str += build_line( '}' );		str += build_line( '%1.%2_fd.onChange = function() {', parent, id );		str += build_line( '	if ( ! isNaN( Number( this.text ) ) ) {' );		str += build_line( '		%1.%2.value = Number(this.text)', parent, id );		str += build_line( '		w.state.%1 = Number( this.text)', id );		str += build_line( '	} else {' );		str += build_line( '		this.text = %1.%2.value', parent, id );		str += build_line( '	}' );		str += build_line( '}' );		return str;	}	// ----------------------------------------------------------------------------------------	// 	Buttons	// ----------------------------------------------------------------------------------------	function Button(element, parent) {		var str = "";		var id = get_id( element );		str += build_line( '// ----------------- %1: %2', "button", id );		if ( id == "defaultElement" || id == "cancelElement" ) {			str += build_line( 'w.%2 = %1.add("button", undefined, "%3")', parent, id, element.@label.toString() );			str += build_line( 'w.%2.onClick= function() {', parent, id );			if ( id == "defaultElement" ) {				str += build_line( '	this.window.close(1)');				str += build_line( '  alert("state\\n" + this.window.state.toSource() )');			} else {				str += build_line( '	this.window.close(2)');			}			str += build_line( '}' );		} else {			str += build_line( '%1.%2 = %1.add("button", undefined, "%3")', parent, id, element.@label.toString() );			str += build_line( '%1.%2.onClick = function() {', parent, id );			str += build_line( '\t// What should happen now?');			str += build_line( '}' );		}				return str;	}	// ----------------------------------------------------------------------------------------	// 	Dropdowns und Listen	// ----------------------------------------------------------------------------------------	function Select(element, parent) {		var str = "";		var id = get_id( element );		str += build_line( '// ----------------- %1: %2', "select", id );				// Wir brauchen ein Array (string[] ), um daraus die Liste zusammenzutstellen		if ( element.hasComplexContent() && element.children().length() < 4 ) {			str += build_line( "var aux = [" );			for ( var n = 0; n < element.children().length(); n++ ) {				str += build_line(' "%1", ', element.child(n).toString() );			}			str += build_line( "]");		} else if ( element.@var.toString() != "" ) {			str += build_line( 'var %1 = ["eins", "zwei", "drei"];	// #### Dies muss gegen eine sinnvolle Variablendefinition getauscht werden ####', element.@var.toString() );			str += build_line( 'var aux = %1.concat([]);  // Kopie des Array anlegen', element.@var.toString() );		} else {			// Darf eigentlich nicht passieren, aber wer baut schon immer sinnvolle XMLs?			str += build_line( 'var aux = [1, 2, 3]' );		}			var type = "dropdownlist";		if ( element.@multiple.toString() != "" ) {			type = "listbox";		} else if ( element.hasComplexContent() && element.children().length() < 4 ) {			type = "radio";		}		str += build_line( '%1.add("statictext", undefined, "%2")', parent, element.@label.toString() );		if ( type == "radio" ) {			str += build_line( 'var auxg = %1.add("group")', parent );			str += build_line( 'for ( var n = 0; n < aux.length; n++ ) auxg.add("radiobutton", undefined, aux[n]);' );		} else {			str += build_line( '%1.%2 = %1.add("%3", undefined, "")', parent, id, type );			str += build_line( 'for ( var n = 0; n < aux.length; n++ ) {' );			str += build_line( '	%1.%2.add("item", aux[n]);', parent, id );			str += build_line( '}' );			if ( type == "listbox" ) {				str += build_line( '%1.%2.onChange = function() {', parent, id );				str += build_line( '	var item = this.find( this.selection );' );				str += build_line( '	if (item) item.checked = ! item.checked; ' );				str += build_line( '}' );			}		}		return str;	}	// ----------------------------------------------------------------------------------------	// 	Utilities	// ----------------------------------------------------------------------------------------	function get_id( element ) {		var initial = element.name().toString().charAt(0);		var id = element.@id.toString() != "" ? element.@id.toString() : (initial + crnt_id++);		return id;	}		function build_line() {		if (false) $.writeln( arguments.toSource() );		if (arguments.length == 0) {			return "\t\n";		} else if ( arguments.length == 1 ) {			return "\t" + arguments[0] + "\n";		} else {			var a = arguments[0];			var b = (arguments[1].constructor.name == "Array") ? [""].concat( arguments[1] ) : arguments;			for (var n = b.length-1; n > 0; n--) {				var re = new RegExp( "%" + n, "g" );				a = a.replace( re, b[n].toString() );			}			return "\t" + a + "\n";		}	}	function trim(s) {		return s.replace(/^(\n|\r|\s)+/, "").replace(/(\n|\r|\s)+$/, "");	}		function getScriptPath() {		var skriptPath, scriptFolderPath;		try {			skriptPath  = app.activeScript.fullName;			skriptFolderPath  = app.activeScript.parent;		} 		catch (e) { 			/* We're running from the ESTK*/			skriptPath = e.fileName		}		return skriptPath;	}	// ----------------------------------------------------------------------------------------	//	Die Blöcke, in denen ich die ScriptUI sammle	// ----------------------------------------------------------------------------------------		var dlg = "";	var init_fill = "";	var list_vars = [];	var text_vars = [];	var number_vars = [];	var bool_vars = [];	var events = "";		dlg += '	// ----------------------------------------------------------------' + cr;	dlg += '	//	Die Dialogkomponenten selbst' + cr;	dlg += '	// ----------------------------------------------------------------' + cr;	dlg += '	var std_w = 400, std_h = 100;' + cr	dlg += '	var w = new Window("dialog");' + cr;	dlg += '	w.orientation = "column";' + cr;	dlg += '	w.alignChildren = ["fill", "fill" ];' + cr + cr;		init_fill += '	// ----------------------------------------------------------------' + cr;	init_fill += '	// 	Default-Werte und Listboxen einfüllen,  etc' + cr;	init_fill += '	// ----------------------------------------------------------------' + cr;	init_fill += '	w.values = {};' + cr;	events += '	// ----------------------------------------------------------------' + cr;	events += '	// 	Event Handler für quasi alles' + cr;	events += '	// ----------------------------------------------------------------' + cr;	var crnt_id = 0;	add_level( "w", xml.children(), 1 );	// ----------------------------------------------------------------------------------------	//	Jetzt die Sammlung schreiben	// ----------------------------------------------------------------------------------------	// Ein paar sample-Arrays	var samples = [		[ "eins", "zwei", "drei", "vier", "fünf" ],		['dreitausend', 'dreitausendeins', 'dreitausendzwei', 'dreitausenddrei', 'dreitausendvier'],		[ 'einhundertundsechszig', 'einhundertundeinundsechszig', 'einhundertundzweiundsechszig', 'einhundertunddreiundsechszig', 'einhundertundvierundsechszig', 'einhundertundfünfundsechszig', 'einhundertundsechsundsechszig' ],		['siebenhundertundelf', 'siebenhundertundzwölf', 'siebenhundertunddreizehn', 'siebenhundertundvierzehn', 'siebenhundertundfünfzehn']		[ 'neuntausendsechshundertundneunzig', 'neuntausendsechshundertundeinundneunzig', 'neuntausendsechshundertundzweiundneunzig', 'neuntausendsechshundertunddreiundneunzig', 'neuntausendsechshundertundvierundneunzig', 'neuntausendsechshundertundfünfundneunzig', 'neuntausendsechshundertundsechsundneunzig', 'neuntausendsechshundertundsiebenundneunzig', 'neuntausendsechshundertundachtundneunzig', 'neuntausendsechshundertundneunundneunzig' ],	]	var ftgt = new File( f.fullName.replace(/\.xml$/i, ".jsx" ) );	if ( ftgt.exists == false || confirm( "Bestehendes Script überschreiben?") ) { 		ftgt.open("w");		for ( var n = 0; n < list_vars.length; n++ ) {			ftgt.writeln( "var " + list_vars[n] + " = " + samples[ n % samples.length].toSource() );		}		for ( var n = 0; n < text_vars.length; n++ ) {			ftgt.writeln( "var " + text_vars[n] + " = 'Ein Textfeldinhalt'" );		}		for ( var n = 0; n < number_vars.length; n++ ) {			ftgt.writeln( "var " + number_vars[n] + " = 1" );		}		for ( var n = 0; n < bool_vars.length; n++ ) {			ftgt.writeln( "var " + bool_vars[n] + " = false");		}		ftgt.writeln( " ");		ftgt.writeln( "function my_dialog() {" );		ftgt.writeln( dlg );		ftgt.writeln( init_fill );		ftgt.writeln( events );		ftgt.writeln( "\n\n	w.show()\n");		ftgt.writeln( "}" );		ftgt.writeln( cr  + cr + "my_dialog();" );		ftgt.close();	}		function add_level(/*context*/ context, /*elements*/ elements, /*nesting*/ nesting_level ) {//		$.bp();		dlg += cr;		for ( var ne = 0; ne < elements.length(); ne++) {			// ----------------------------------------------------------------------------------------			//defaults sichern 			// ----------------------------------------------------------------------------------------			var element_n = elements[ne];//			if ( ! element_n.name() ) element_n.name() = "group";			if ( element_n.@id == "" ) {				element_n.@id = element_n.name().toString().substr(0,1) + crnt_id;				crnt_id++;			}			if ( ! element_n.@label ) element_n.@label = "";			var el_path = trim( context + "." + element_n.@id );						// ----------------------------------------------------------------------------------------			// ----------------------------------------------------------------------------------------			// 	Brauchen Typen Extrawürste?			// ----------------------------------------------------------------------------------------			// 	Group oder Panel			// ----------------------------------------------------------------------------------------			if ( element_n.name() == "group" || element_n.name() == "panel" ) {				add_std_e( context, element_n.name(), el_path, trim( element_n.@label.toString() ), nesting_level );				indent_and_add_2_dlg( 					el_path + '.orientation = ' + (nesting_level % 2 ? '"row"' : '"column"'),					nesting_level				);				indent_and_add_2_dlg(					el_path + '.alignChildren = ["fill", "' + (element_n.name() == "group" ? 'fill' : 'top') + '"]',					nesting_level				)				add_level( el_path, element_n.children(), nesting_level + 1 );											} else if ( element_n.name() == "n_of_m" || element_n.name() == "one_of_n" ) {				// ----------------------------------------------------------------------------------------				// 	Listbox oder Dropdown				// ----------------------------------------------------------------------------------------				add_std_e( context, "statictext", "", trim( element_n.@label.toString() ), nesting_level );				if ( element_n.name() == "one_of_n" ) {					add_std_e( context, "dropdownlist", el_path, undefined, nesting_level );				} else {					add_std_e( context, "listbox", el_path, undefined, nesting_level );				}								var list;				if ( element_n.hasSimpleContent() ) {					var aux = trim( element_n.toString() );					if ( list_vars.contains( aux ) === false ) list_vars.push( aux );					list = aux;				} else {					list = [];					for ( var nc = 0; nc < element_n.value.length() ; nc++) {						var aux = element_n.value[nc];						list.push( element_n.value[nc].toString() );					}					list = list.toSource();				}				init_fill += "	for ( var n = 0; n < " + list + ".length; n++ ) {" + cr;				init_fill += "		var aux = " + el_path + ".add('item', " + list + "[n])" + cr;				if ( element_n.name() == "n_of_m" ) {					init_fill += "		aux.checked = false;" + cr;				} else {					init_fill += "		" + el_path + ".selection = " + el_path + "[0]" + cr;				}				init_fill += "	}" + cr;				init_fill += "	w.values." + element_n.@id + " = '" + list[0] + "'" + cr;								events += "	" + el_path + ".onChange = function () {" + cr 				events += "		var w = this.window;" + cr 				events += "		$.writeln( '" + el_path + " was changed' );" + cr;				events += "		w.values." + element_n.@id + " = this.selection;" + cr;				events += "		var item = this.find( this.selection );" +cr;				events += "		if( item ) item.checked = ! item.checked;" +cr;				events += "	}" + cr;							} else if ( element_n.name() == "checkbox" ) {				// ----------------------------------------------------------------------------------------				// 	Checkbox				// ----------------------------------------------------------------------------------------				if ( element_n.value.length() == 0 ) {					element_n_value = element_n;					var aux = trim( element_n_value.toString() );					init_fill += "	w.values." + element_n.@id + " = " + aux + ";" + cr;					if ( bool_vars.contains( aux ) === false ) bool_vars.push( aux );				} else {					element_n_value = trim( element_n.value.toString() );					init_fill += "	w.values." + element_n.@id + " = '" + element_n_value + "';" + cr;				}				add_std_e( context, "checkbox", el_path, element_n.@label.toString() , nesting_level );								events += "	" + el_path + ".onClick = function () {" + cr 				events += "		var w = this.window;" + cr 				events += "		$.writeln( '" + el_path + " was clicked' );" + cr;				events += "		w.values." + element_n.@id + " = this.value;" + cr;				events += "	}" + cr;											} else if ( element_n.name() == "button" || element_n.name() == "defaultElement" || element_n.name() == "cancelElement" ) {				// ----------------------------------------------------------------------------------------				// 	Button				// ----------------------------------------------------------------------------------------				if ( el_path.search(/defaultElement/) != -1 || el_path.search(/cancelElement/) != -1 ) { 					var aux = el_path.split(".");					el_path = aux[0] + "." + aux.pop();				}				add_std_e( context, "button", el_path, trim( element_n.@label.toString() ), nesting_level );								events += "	" + el_path + ".onClick = function () {" + cr 				events += "		var w = this.window;" + cr 				events += "		$.writeln( '" + el_path + " was clicked' );" + cr;				if ( element_n.@id == "defaultElement" ) {					events += "		alert('ok\\n' + w.values.toSource() );" + cr;					events += "		w.close(1)" + cr;				} else if ( element_n.@id == "cancelElement" ) {					events += "		w.close(0)" + cr;				} 				events += "	}" + cr;								} else if ( element_n.name() == "slider" ) {				// ----------------------------------------------------------------------------------------				// 	Slider				// ----------------------------------------------------------------------------------------				add_std_e( context, "statictext", "", trim( element_n.@label.toString() ), nesting_level );				add_std_e( context, "slider", el_path, trim( element_n.@label.toString() ), nesting_level );								init_fill += el_path + ".minvalue = -10;" + cr;				init_fill += el_path + ".maxvalue =  10;" + cr;				init_fill += el_path + ".value = 0;" + cr;								events += "	" + el_path + ".onChange = function () {" + cr 				events += "		var w = this.window;" + cr 				events += "		$.writeln( this.toSource() );" + cr;				events += "		w.values." + element_n.@id + " = this.value;" + cr;				events += "	}" + cr;								} else if ( element_n.name() == "number" || element_n.name() == "text" ) {				// ----------------------------------------------------------------------------------------				// 	Edittext				// ----------------------------------------------------------------------------------------				add_std_e( context, "statictext", "", trim( element_n.@label.toString() ), nesting_level );				// Verabredung: 				// <text>some_text</text> verwendet die Variable some_text				// <text><value>some_text</value><text> verwendet den literal string "some_text"				var element_n_value				if ( element_n.value.length() == 0 ) {					element_n_value = element_n;					var aux = trim( element_n_value.toString() );					init_fill += "	w.values." + element_n.@id + " = " + aux + ";" + cr;					if ( element_n.name() == "number" ) {						if ( number_vars.contains( aux ) === false ) number_vars.push( aux );					} else {						if ( text_vars.contains( aux ) === false ) text_vars.push( aux );					}				} else {					element_n_value = trim( element_n.value.toString() );					init_fill += "	w.values." + element_n.@id + " = '" + element_n_value + "';" + cr;				}				add_std_e( context, "edittext", el_path, element_n_value, nesting_level );								if ( element_n.name() == "number" ) {					events += "	" + el_path + ".onChange = function () {" + cr 					events += "		var w = this.window;" + cr 					events += "		$.writeln( '" + el_path + " was changed' );" + cr					events += "		if ( isNaN( Number ( this.text ) ) ) { " + cr 					events += "			this.text = w.values." + element_n.@id + ";" + cr					events += "		} else {" + cr					events += "			w.values." + element_n.@id + " = this.text" + cr					events += "		}" + cr					events += "	}" + cr;				} else {					events += "	" + el_path + ".onChange = function () {" + cr 					events += "		var w = this.window;" + cr 					events += "		$.writeln( '" + el_path + " was changed' );" + cr					events += "		w.values." + element_n.@id + " = this.text" + cr 					events += "	}" + cr;				}			}	// /if type			dlg += cr;		}	}		function add_std_e( context, type, id, label, level ) {		if ( id ) {			id += " = ";		}		if ( typeof label == "string" ) {			label = ', "' + label + '"';		} else if ( typeof label == "xml" ) {			label = ', ' + trim( label.toString() );		} else if ( label == undefined ) {			label = "";		} else {			label = ", " + label.toSource()		}		if ( type == "listbox" ) {			indent_and_add_2_dlg(  id				+ context + '.add("' + type + '", [' 					+ x + ', ' 					+ y + ", " 					+ std_w + ', ' 					+ std_h + ']' 					+ label 				+ ')',				level			);		} else if ( type == "edittext" || type == "dropdownlist"  ) {			indent_and_add_2_dlg(  id				+ context + '.add("' + type + '", [' 					+ x + ', ' 					+ y + ", " 					+ std_w + ', ' 					+ 20 + ']' 					+ label 				+ ')',				level			);		} else if ( type == "slider" ) {			indent_and_add_2_dlg(  id				+ context + '.add("' + type + '", [' 					+ x + ', ' 					+ y + ", " 					+ std_w + ', ' 					+ 20 + ']' 					+ label 				+ ')',				level			);		} else {			indent_and_add_2_dlg(  id				+ context + '.add("' + type + '", ' 					+ 'undefined ' 					+ label 				+ ')',				level			);		}	}		function indent_and_add_2_dlg( s, l ) {		if ( l  === undefined) l = 1;		var txt = "";		if ( l ) txt += ("                      ").substr(0, l * 2 );		txt += s;		txt += ";";		txt += cr;		dlg += txt;	}}