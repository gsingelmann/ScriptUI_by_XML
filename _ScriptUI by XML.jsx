Array.prototype.contains = function(x) {	for ( var n = 0; n < this.length; n++ ) if ( this[n] == x ) return n;	return false;}main();function main() {	var spath = getScriptPath ();	var f = new File( spath + "/text.xml" );	f = f.openDlg("Welche Config-XML?", function(f) { return ( f.constructor.name == "Folder" || f.name.search(/xml$/i) != -1 ) } );	if ( f == null ) return;	f.open("r");	var x = f.read();	f.close();	var xml = new XML( x );	var x = "undefined", y = "undefined", std_w = "std_w", std_h = "std_h";	var cr = "\n";		// ----------------------------------------------------------------------------------------	//	Die Blöcke, in denen ich die ScriptUI sammle	// ----------------------------------------------------------------------------------------		var dlg = "";	var init_fill = "";	var list_vars = [];	var text_vars = [];	var number_vars = [];	var bool_vars = [];	var events = "";		dlg += '	// ----------------------------------------------------------------' + cr;	dlg += '	//	Die Dialogkomponenten selbst' + cr;	dlg += '	// ----------------------------------------------------------------' + cr;	dlg += '	var std_w = 400, std_h = 100;' + cr	dlg += '	var w = new Window("dialog");' + cr;	dlg += '	w.orientation = "column";' + cr;	dlg += '	w.alignChildren = ["fill", "fill" ];' + cr + cr;		init_fill += '	// ----------------------------------------------------------------' + cr;	init_fill += '	// 	Default-Werte und Listboxen einfüllen,  etc' + cr;	init_fill += '	// ----------------------------------------------------------------' + cr;	init_fill += '	w.values = {};' + cr;	events += '	// ----------------------------------------------------------------' + cr;	events += '	// 	Event Handler für quasi alles' + cr;	events += '	// ----------------------------------------------------------------' + cr;	var crnt_id = 0;	add_level( "w", xml.children(), 1 );	// ----------------------------------------------------------------------------------------	//	Jetzt die Sammlung schreiben	// ----------------------------------------------------------------------------------------	// Ein paar sample-Arrays	var samples = [		[ "eins", "zwei", "drei", "vier", "fünf" ],		['dreitausend', 'dreitausendeins', 'dreitausendzwei', 'dreitausenddrei', 'dreitausendvier'],		[ 'einhundertundsechszig', 'einhundertundeinundsechszig', 'einhundertundzweiundsechszig', 'einhundertunddreiundsechszig', 'einhundertundvierundsechszig', 'einhundertundfünfundsechszig', 'einhundertundsechsundsechszig' ],		['siebenhundertundelf', 'siebenhundertundzwölf', 'siebenhundertunddreizehn', 'siebenhundertundvierzehn', 'siebenhundertundfünfzehn']		[ 'neuntausendsechshundertundneunzig', 'neuntausendsechshundertundeinundneunzig', 'neuntausendsechshundertundzweiundneunzig', 'neuntausendsechshundertunddreiundneunzig', 'neuntausendsechshundertundvierundneunzig', 'neuntausendsechshundertundfünfundneunzig', 'neuntausendsechshundertundsechsundneunzig', 'neuntausendsechshundertundsiebenundneunzig', 'neuntausendsechshundertundachtundneunzig', 'neuntausendsechshundertundneunundneunzig' ],	]	var ftgt = new File( f.fullName.replace(/\.xml$/i, ".jsx" ) );	if ( ftgt.exists == false || confirm( "Bestehendes Script überschreiben?") ) { 		ftgt.open("w");		for ( var n = 0; n < list_vars.length; n++ ) {			ftgt.writeln( "var " + list_vars[n] + " = " + samples[ n % samples.length].toSource() );		}		for ( var n = 0; n < text_vars.length; n++ ) {			ftgt.writeln( "var " + text_vars[n] + " = 'Ein Textfeldinhalt'" );		}		for ( var n = 0; n < number_vars.length; n++ ) {			ftgt.writeln( "var " + number_vars[n] + " = 1" );		}		for ( var n = 0; n < bool_vars.length; n++ ) {			ftgt.writeln( "var " + bool_vars[n] + " = false");		}		ftgt.writeln( " ");		ftgt.writeln( "function my_dialog() {" );		ftgt.writeln( dlg );		ftgt.writeln( init_fill );		ftgt.writeln( events );		ftgt.writeln( "\n\n	w.show()\n");		ftgt.writeln( "}" );		ftgt.writeln( cr  + cr + "my_dialog();" );		ftgt.close();	}		function add_level(/*context*/ context, /*elements*/ elements, /*nesting*/ nesting_level ) {//		$.bp();		dlg += cr;		for ( var ne = 0; ne < elements.length(); ne++) {			// ----------------------------------------------------------------------------------------			//defaults sichern 			// ----------------------------------------------------------------------------------------			var element_n = elements[ne];//			if ( ! element_n.name() ) element_n.name() = "group";			if ( element_n.@id == "" ) {				element_n.@id = element_n.name().toString().substr(0,1) + crnt_id;				crnt_id++;			}			if ( ! element_n.@label ) element_n.@label = "";			var el_path = trim( context + "." + element_n.@id );						// ----------------------------------------------------------------------------------------			// ----------------------------------------------------------------------------------------			// 	Brauchen Typen Extrawürste?			// ----------------------------------------------------------------------------------------			// 	Group oder Panel			// ----------------------------------------------------------------------------------------			if ( element_n.name() == "group" || element_n.name() == "panel" ) {				add_std_e( context, element_n.name(), el_path, trim( element_n.@label.toString() ), nesting_level );				indent_and_add_2_dlg( 					el_path + '.orientation = ' + (nesting_level % 2 ? '"row"' : '"column"'),					nesting_level				);				indent_and_add_2_dlg(					el_path + '.alignChildren = ["fill", "' + (element_n.name() == "group" ? 'fill' : 'top') + '"]',					nesting_level				)				add_level( el_path, element_n.children(), nesting_level + 1 );											} else if ( element_n.name() == "n_of_m" || element_n.name() == "one_of_n" ) {				// ----------------------------------------------------------------------------------------				// 	Listbox oder Dropdown				// ----------------------------------------------------------------------------------------				add_std_e( context, "statictext", "", trim( element_n.@label.toString() ), nesting_level );				if ( element_n.name() == "one_of_n" ) {					add_std_e( context, "dropdownlist", el_path, undefined, nesting_level );				} else {					add_std_e( context, "listbox", el_path, undefined, nesting_level );				}								var list;				if ( element_n.hasSimpleContent() ) {					var aux = trim( element_n.toString() );					if ( list_vars.contains( aux ) === false ) list_vars.push( aux );					list = aux;				} else {					list = [];					for ( var nc = 0; nc < element_n.value.length() ; nc++) {						var aux = element_n.value[nc];						list.push( element_n.value[nc].toString() );					}					list = list.toSource();				}				init_fill += "	for ( var n = 0; n < " + list + ".length; n++ ) {" + cr;				init_fill += "		var aux = " + el_path + ".add('item', " + list + "[n])" + cr;				if ( element_n.name() == "n_of_m" ) {					init_fill += "		aux.checked = false;" + cr;				} else {					init_fill += "		" + el_path + ".selection = " + el_path + "[0]" + cr;				}				init_fill += "	}" + cr;				init_fill += "	w.values." + element_n.@id + " = '" + list[0] + "'" + cr;								events += "	" + el_path + ".onChange = function () {" + cr 				events += "		var w = this.window;" + cr 				events += "		$.writeln( '" + el_path + " was changed' );" + cr;				events += "		w.values." + element_n.@id + " = this.selection;" + cr;				events += "		var item = this.find( this.selection );" +cr;				events += "		if( item ) item.checked = ! item.checked;" +cr;				events += "	}" + cr;							} else if ( element_n.name() == "checkbox" ) {				// ----------------------------------------------------------------------------------------				// 	Checkbox				// ----------------------------------------------------------------------------------------				if ( element_n.value.length() == 0 ) {					element_n_value = element_n;					var aux = trim( element_n_value.toString() );					init_fill += "	w.values." + element_n.@id + " = " + aux + ";" + cr;					if ( bool_vars.contains( aux ) === false ) bool_vars.push( aux );				} else {					element_n_value = trim( element_n.value.toString() );					init_fill += "	w.values." + element_n.@id + " = '" + element_n_value + "';" + cr;				}				add_std_e( context, "checkbox", el_path, element_n.@label.toString() , nesting_level );								events += "	" + el_path + ".onClick = function () {" + cr 				events += "		var w = this.window;" + cr 				events += "		$.writeln( '" + el_path + " was clicked' );" + cr;				events += "		w.values." + element_n.@id + " = this.value;" + cr;				events += "	}" + cr;											} else if ( element_n.name() == "button" || element_n.name() == "defaultElement" || element_n.name() == "cancelElement" ) {				// ----------------------------------------------------------------------------------------				// 	Button				// ----------------------------------------------------------------------------------------				if ( el_path.search(/defaultElement/) != -1 || el_path.search(/cancelElement/) != -1 ) { 					var aux = el_path.split(".");					el_path = aux[0] + "." + aux.pop();				}				add_std_e( context, "button", el_path, trim( element_n.@label.toString() ), nesting_level );								events += "	" + el_path + ".onClick = function () {" + cr 				events += "		var w = this.window;" + cr 				events += "		$.writeln( '" + el_path + " was clicked' );" + cr;				if ( element_n.@id == "defaultElement" ) {					events += "		alert('ok\\n' + w.values.toSource() );" + cr;					events += "		w.close(1)" + cr;				} else if ( element_n.@id == "cancelElement" ) {					events += "		w.close(0)" + cr;				} 				events += "	}" + cr;								} else if ( element_n.name() == "slider" ) {				// ----------------------------------------------------------------------------------------				// 	Slider				// ----------------------------------------------------------------------------------------				add_std_e( context, "statictext", "", trim( element_n.@label.toString() ), nesting_level );				add_std_e( context, "slider", el_path, trim( element_n.@label.toString() ), nesting_level );								init_fill += el_path + ".minvalue = -10;" + cr;				init_fill += el_path + ".maxvalue =  10;" + cr;				init_fill += el_path + ".value = 0;" + cr;								events += "	" + el_path + ".onChange = function () {" + cr 				events += "		var w = this.window;" + cr 				events += "		$.writeln( this.toSource() );" + cr;				events += "		w.values." + element_n.@id + " = this.value;" + cr;				events += "	}" + cr;								} else if ( element_n.name() == "number" || element_n.name() == "text" ) {				// ----------------------------------------------------------------------------------------				// 	Edittext				// ----------------------------------------------------------------------------------------				add_std_e( context, "statictext", "", trim( element_n.@label.toString() ), nesting_level );				// Verabredung: 				// <text>some_text</text> verwendet die Variable some_text				// <text><value>some_text</value><text> verwendet den literal string "some_text"				var element_n_value				if ( element_n.value.length() == 0 ) {					element_n_value = element_n;					var aux = trim( element_n_value.toString() );					init_fill += "	w.values." + element_n.@id + " = " + aux + ";" + cr;					if ( element_n.name() == "number" ) {						if ( number_vars.contains( aux ) === false ) number_vars.push( aux );					} else {						if ( text_vars.contains( aux ) === false ) text_vars.push( aux );					}				} else {					element_n_value = trim( element_n.value.toString() );					init_fill += "	w.values." + element_n.@id + " = '" + element_n_value + "';" + cr;				}				add_std_e( context, "edittext", el_path, element_n_value, nesting_level );								if ( element_n.name() == "number" ) {					events += "	" + el_path + ".onChange = function () {" + cr 					events += "		var w = this.window;" + cr 					events += "		$.writeln( '" + el_path + " was changed' );" + cr					events += "		if ( isNaN( Number ( this.text ) ) ) { " + cr 					events += "			this.text = w.values." + element_n.@id + ";" + cr					events += "		} else {" + cr					events += "			w.values." + element_n.@id + " = this.text" + cr					events += "		}" + cr					events += "	}" + cr;				} else {					events += "	" + el_path + ".onChange = function () {" + cr 					events += "		var w = this.window;" + cr 					events += "		$.writeln( '" + el_path + " was changed' );" + cr					events += "		w.values." + element_n.@id + " = this.text" + cr 					events += "	}" + cr;				}			}	// /if type			dlg += cr;		}	}		function add_std_e( context, type, id, label, level ) {		if ( id ) {			id += " = ";		}		if ( typeof label == "string" ) {			label = ', "' + label + '"';		} else if ( typeof label == "xml" ) {			label = ', ' + trim( label.toString() );		} else if ( label == undefined ) {			label = "";		} else {			label = ", " + label.toSource()		}		if ( type == "listbox" ) {			indent_and_add_2_dlg(  id				+ context + '.add("' + type + '", [' 					+ x + ', ' 					+ y + ", " 					+ std_w + ', ' 					+ std_h + ']' 					+ label 				+ ')',				level			);		} else if ( type == "edittext" || type == "dropdownlist"  ) {			indent_and_add_2_dlg(  id				+ context + '.add("' + type + '", [' 					+ x + ', ' 					+ y + ", " 					+ std_w + ', ' 					+ 20 + ']' 					+ label 				+ ')',				level			);		} else if ( type == "slider" ) {			indent_and_add_2_dlg(  id				+ context + '.add("' + type + '", [' 					+ x + ', ' 					+ y + ", " 					+ std_w + ', ' 					+ 20 + ']' 					+ label 				+ ')',				level			);		} else {			indent_and_add_2_dlg(  id				+ context + '.add("' + type + '", ' 					+ 'undefined ' 					+ label 				+ ')',				level			);		}	}		function indent_and_add_2_dlg( s, l ) {		if ( l  === undefined) l = 1;		var txt = "";		if ( l ) txt += ("                      ").substr(0, l * 2 );		txt += s;		txt += ";";		txt += cr;		dlg += txt;	}	function trim(s) {		return s.replace(/^(\n|\r|\s)+/, "").replace(/(\n|\r|\s)+$/, "");	}		function getScriptPath() {		var skriptPath, scriptFolderPath;		try {			skriptPath  = app.activeScript.fullName;			skriptFolderPath  = app.activeScript.parent;		} 		catch (e) { 			/* We're running from the ESTK*/			skriptPath = e.fileName		}		return skriptPath;	}}